import pycom
import time
from machine import Pin
from dth import DTH
from network import LoRa
import socket
import ubinascii
import struct

th = DTH('P11',0)

# Initialise LoRa in LORAWAN mode.
# Please pick the region that matches where you are using the device:
# Asia = LoRa.AS923
# Australia = LoRa.AU915
# Europe = LoRa.EU868
# United States = LoRa.US915
lora = LoRa(mode=LoRa.LORAWAN, region=LoRa.EU868)

# create an ABP authentication params
dev_addr = struct.unpack(">l", ubinascii.unhexlify('0145bf61'))[0]
nwk_swkey = ubinascii.unhexlify('aba4075c99b7f1563ba6da90b3a97fec')
app_swkey = ubinascii.unhexlify('1bff9d90da40726ef657a5db58b79170')

# join a network using ABP (Activation By Personalization)
lora.join(activation=LoRa.ABP, auth=(dev_addr, nwk_swkey, app_swkey))


# wait until the module has joined the network
while not lora.has_joined():
    time.sleep(5)
    print('Not joined yet...')

print('Network joined!')
# print(str(ubinascii.hexlify(lora.mac())))

# create a LoRa socket
s = socket.socket(socket.AF_LORA, socket.SOCK_RAW)

# set the LoRaWAN data rate
s.setsockopt(socket.SOL_LORA, socket.SO_DR, 5)

# make the socket non-blocking
# (because if there's no data received it will block forever...)
s.setblocking(False)
# loop to read temperature / humidity from DHT11
#
time.sleep(2)
while True:
    # Call read() method, which will return DHTResult object with actual values and error code.
    result = th.read()
    if result.is_valid():
        #s.send(bytes([0x01, 0x02, 0x03]))
        s.send(bytes([result.temperature, result.humidity]))
        print("Temperature: {} C".format(result.temperature))
        print("Humidity: {}%".format(result.humidity))
        print("Packet sent!")
        time.sleep(30) # wait for the tx and rx to complete
        rx_pkt = s.recv(64)   # get the packet received (if any)
        print(rx_pkt)
    else:
        print("Error reading sensor !")
    time.sleep(2)
